'''
Mã hóa:
1. Viết hàm y = IP(x) thực hiện hoán vị IP
Input: x - chuỗi số 64 bit
Output: y – chuỗi số 64 bit là hoán vị của x theo ma trận IP
2. Viết hàm SPLIT(x, L, R) tách chuỗi số 64 bit (x) thành 2 nửa 32 bit trái (L) và phải (R);
3. Viết hàm R1 = E(R) mở rộng chuỗi số 32 bit (R) thành chuỗi số 48 bit (R1) theo ma trận mở rộng E.
Input: R - chuỗi số 32 bit
Output: R1 – chuỗi số 48 bit
4. Viết hàm XR1K = XOR(R1, Ks) thực hiện phép XOR bit hai chuỗi số 48 bit R1 và Ks.
Input: R1, Ks - chuỗi số 48 bit
Output: XR1K – chuỗi số 48 bit
5. Viết hàm SXR1K = SUB(XR1K) thực hiện phép thế byte bằng bảng S-box cho chuỗi số 48 bit XR1K.
Input: XR1K - chuỗi số 48 bit
Output: SXR1K – chuỗi số 32 bit
6. Viết hàm F = P(SXR1K) thực hiện hoán vị P
Input: SXR1K - chuỗi số 32 bit
Output: F – chuỗi số 32 bit là hoán vị của x theo ma trận P
'''

from DES_SinhKhoa import *

IP_table = [
    58, 50, 42, 34, 26, 18, 10, 2,
    60, 52, 44, 36, 28, 20, 12, 4,
    62, 54, 46, 38, 30, 22, 14, 6,
    64, 56, 48, 40, 32, 24, 16, 8,
    57, 49, 41, 33, 25, 17, 9, 1,
    59, 51, 43, 35, 27, 19, 11, 3,
    61, 53, 45, 37, 29, 21, 13, 5,
    63, 55, 47, 39, 31, 23, 15, 7
]
E_table = [
    32, 1, 2, 3, 4, 5, 4, 5, 6, 7, 8, 9, 8, 9, 10, 11, 12, 13,
    12, 13, 14, 15, 16, 17, 16, 17, 18, 19, 20, 21, 20, 21, 22, 23, 24, 25,
    24, 25, 26, 27, 28, 29, 28, 29, 30, 31, 32, 1
]

P_table = [
    16, 7, 20, 21, 29, 12, 28, 17,
    1, 15, 23, 26, 5, 18, 31, 10,
    2, 8, 24, 14, 32, 27, 3, 9,
    19, 13, 30, 6, 22, 11, 4, 25
]

def IP(x):
    res = ""
    for i in IP_table:
        res += x[i-1]
    return res

def E(R):
    res = ""
    for e in E_table:
        res += R[e-1]
    return res

def XOR(a, b):
    strXOR = ""
    for bit_a, bit_b in zip(a,b):
        strXOR += str(int(bit_a) ^ int(bit_b))
    return strXOR

def SUB(XR1K):
    S_box = [
        # Sbox 1
        [[14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7],
         [0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8],
         [4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0],
         [15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13]],

        # Sbox 2
        [[15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10],
         [3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5],
         [0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15],
         [13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9]],

        # Sbox 3
        [[10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8],
         [13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1],
         [13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7],
         [1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12]],

        # Sbox 4
        [[7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15],
         [13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9],
         [10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4],
         [3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14]],

        # Sbox 5
        [[2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9],
         [14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6],
         [4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14],
         [11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3]],

        # Sbox 6
        [[12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11],
         [10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8],
         [9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6],
         [4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13]],

        # Sbox 7
        [[4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1],
         [13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6],
         [1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2],
         [6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12]],

        # Sbox 8
        [[13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7],
         [1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2],
         [7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8],
         [2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11]],
    ]
    res = ""
    for i in range(8):
        block = XR1K[i*6: (i+1)*6]
        row = int(block[0]+block[5], 2)
        column = int(block[1:5], 2)
        res += format(S_box[i][row][column], '04b')
    return res

def P(x):
    res = ""
    for p in P_table:
        res += x[p-1]
    return res

if __name__ == "__main__":
    M = '66581B2AE5B0BD6D'
    M = hexToBin(M)
    IP_M = IP(M)
    print("Hoán vị IP(M) = ", IP_M)
    L0, R0 = SPLIT_KEY(IP_M)
    print("L0 = ", L0)
    print("R0 = ", R0)
    R1 = E(R0)
    print("Hàm mở rộng nửa phải E[R0] = ", R1)
    K1 = "111000010010011111001010110110000100010100010111"
    A = XOR(R1, K1)
    print("A = XOR(E[R0],K1) = ", A)
    B = SUB(A)
    print("B = Sbox(A) = ", B)
    F = P(B)
    print("F = Hoán vị P(B) = ", F)


